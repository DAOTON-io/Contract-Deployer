(int, slice, slice, slice, slice ,slice, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (
     ds~load_uint(64), ;; dao_type
     ds~load_msg_addr(), ;; token_contract
     ds~load_msg_addr(), ;; nft_contract
     ds~load_msg_addr(), ;; dao_name
     ds~load_msg_addr(), ;; dao_image
     ds~load_msg_addr(), ;; dao_description
     ds~load_ref()  ;; proposals
     );
}

() save_data(int dao_type ,slice token_contract, slice nft_contract ,slice dao_name , slice dao_image, slice dao_description,cell proposals) impure inline {
  set_data(begin_cell()
    .store_uint(dao_type, 64)
    .store_slice(token_contract)
    .store_slice(nft_contract)
    .store_slice(dao_name)
    .store_slice(dao_image)
    .store_slice(dao_description)
    .store_ref(proposals)
    .end_cell());
}

;; init state
() recv_internal(cell in_msg_cell) impure {
  var (dao_type, token_contract, nft_contract,dao_name, dao_image, dao_description,proposals ) = load_data();


  save_data(1, "token", "nft", "dao", "image", "description", begin_cell().store_uint(0x18, 6).end_cell());
}


(int, slice, slice, slice, slice ,slice, cell) get_current_data() method_id {
   var (dao_type, token_contract, nft_contract,dao_name, dao_image,dao_description,proposals) = load_data();
   return (dao_type, token_contract, nft_contract,dao_name, dao_image,dao_description,proposals);
 }
