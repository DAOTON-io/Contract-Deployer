int error::invalid_message() asm "72 PUSHINT";

(int, slice, slice, cell,int, cell) load_data() inline {
  var ds = get_data().begin_parse();
 
  ;; "1,2,3,4,5,6,7"
  int dao_type = ds~load_uint(16);

  slice token_contract =  ds~load_msg_addr();
  slice nft_contract =  ds~load_msg_addr();
  cell content = ds~load_ref();
  int proposals_seq = ds~load_uint(32);
  ;; cell proposals_ref = ds~load_ref();


  ;; ;; Parse proposals
  cell proposals_dict = ds~load_dict();

  ds.end_parse();

return (dao_type, token_contract, nft_contract,content ,proposals_seq,proposals_dict);
}

() save_data(int dao_type ,slice token_contract, slice nft_contract ,cell content, int proposals_seq, cell proposals_dict) impure inline {
  set_data(begin_cell()
    .store_uint(dao_type, 16)
    .store_slice(token_contract)
    .store_slice(nft_contract)
    .store_ref(content)
    .store_uint(proposals_seq, 32)
    .store_dict(proposals_dict)
    .end_cell());
}

cell design_proposal(int owner,int balance,int timestamp ,int threshold_success ,int threshold_fail, cell proposals_dict, int proposal_id, int yes,int no, int abstain,cell votes,int is_related_with_nft,cell content) { 
    ;; Serialize proposal
    var container = begin_cell()
        .store_uint(owner,256) ;; proposal creater = master of proposal for cancel , execute ect.
        .store_coins(balance) ;; proposal init balance
        .store_coins(yes) ;; yes count
        .store_coins(no) ;; no count
        .store_coins(abstain) ;; abstain count
        .store_uint(timestamp,64) ;; expire time
        .store_ref(begin_cell() ;;  
            .store_coins(threshold_success)
            .store_coins(threshold_fail)
            .store_uint(is_related_with_nft, 2) ;; nft relation true | false
            .store_ref(content) ;; description , question text
        .end_cell()) ;; votes
        .store_dict(votes);

  return udict_set_builder(proposals_dict,32, proposal_id , container);
}

(int,int,int,int,int,int,int,int,cell,int,cell) get_proposal(int id) method_id {
    var (dao_type, token_contract, nft_contract, content ,proposals_seq, proposals_dict ) = load_data();

    var (itm, found) = proposals_dict.udict_get?(32, id);

    ;; Read
    int owner = itm~load_uint(256);
    int balance = itm~load_coins();
    int proposal_voted_yes = itm~load_coins();
    int proposal_voted_no = itm~load_coins();
    int proposal_voted_abstain = itm~load_coins();
    int timestamp = itm~load_uint(64);
    cell threshold_ref = itm~load_ref();

    var threshold_data = threshold_ref.begin_parse();
    int success_threshold = threshold_data~load_coins();
    int fail_threshold = threshold_data~load_coins();
    int is_related_with_nft = threshold_data~load_uint(2);
    cell content = threshold_data~load_ref();

    threshold_data.end_parse();

    cell votes = itm~load_dict();

    return (owner,balance,proposal_voted_yes,proposal_voted_no,proposal_voted_abstain,timestamp,success_threshold,fail_threshold, votes,is_related_with_nft,content);
}

() execute_proposal(int proposal_id, int admin, slice target_address) impure {
 var (owner,balance,proposal_voted_yes,proposal_voted_no,proposal_voted_abstain,timestamp,success_threshold,fail_threshold,votes,is_related_with_nft,content) = get_proposal(proposal_id);

 throw_unless(error::invalid_message(), owner == admin);

  ;; Basic message
      
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(target_address)
            .store_coins(balance)
            .store_uint(0, 1 + 4 + 4 + 64 + 32);

            ;; State init
            msg = msg.store_uint(0, 1);
      
            ;; Payload
            msg = msg.store_uint(0, 1);
        
            ;; Send message
  send_raw_message(msg.end_cell(), 1 + 2);
}

;; init state
() recv_internal(cell in_msg_cell, slice in_msg_body) impure {
  var (dao_type, token_contract, nft_contract, content , proposals_seq , proposals_dict) = load_data();

  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
  }
 
  ;; Get sender address
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  slice s_addr = cs~load_msg_addr();
  (int sender_wc, slice sender_addr) = parse_var_addr(s_addr);
  int member = sender_addr~load_uint(256);

  int op = in_msg_body~load_uint(32);

  if(op == 0) {
   slice dao_contract = in_msg_body~load_msg_addr();
   slice daoton_contract = in_msg_body~load_msg_addr();

       var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(daoton_contract)
            .store_coins(10000000)
            .store_uint(0, 1 + 4 + 4 + 64 + 32);

            ;; State init
            msg = msg.store_uint(0, 1);

            ;; Payload
            msg = msg.store_uint(1, 1);

            var msg_body = begin_cell()
                      .store_uint(1, 32)
                      .store_slice(daoton_contract) ;; dao contract id 
                      .end_cell();

            msg = msg.store_ref(msg_body);
            ;; Send message
            send_raw_message(msg.end_cell(), 1 + 2);
  }

 ;; op1 = create proposal
  if(op == 1){
   int balance = in_msg_body~load_coins(); 
   int timestamp = in_msg_body~load_uint(64); ;; timestamp
   int success_threshold = in_msg_body~load_coins(); ;; success_threshold
   int fail_threshold = in_msg_body~load_coins(); ;; fail_threshold
   int is_related_with_nft = in_msg_body~load_uint(2); ;; nft relationship true | false
   cell content = in_msg_body~load_ref();

   proposals_dict = design_proposal(member,balance,timestamp, success_threshold, fail_threshold , proposals_dict,proposals_seq ,0 , 0 , 0, null(),is_related_with_nft,content);

   save_data(dao_type, token_contract, nft_contract,content, proposals_seq + 1, proposals_dict);
   return ();
  } 

  ;; op2 = vote
  if(op == 2){
  ;; 0 = Abstain 1 = Yes 2 = No
  int proposal_id = in_msg_body~load_uint(32);
  int vote = in_msg_body~load_uint(2);
   
  var (owner,balance,proposal_voted_yes,proposal_voted_no,proposal_voted_abstain,timestamp,success_threshold,fail_threshold,votes,is_related_with_nft,content) = get_proposal(proposal_id);

  var (vs, vfound) = votes.udict_get?(256, member);
  throw_if(error::invalid_message(), vfound);

  ;; abstain vote
  if(vote == 0){
    proposal_voted_abstain = proposal_voted_abstain + 1;
    votes = udict_set_builder(votes, 256, member, begin_cell().store_uint(0,2));
  } 

  ;; yes vote
  if(vote == 1){
    proposal_voted_yes = proposal_voted_yes + 1;
    votes = udict_set_builder(votes, 256, member, begin_cell().store_uint(1,2));
  }

  ;; no vote
  if(vote == 2){
    proposal_voted_no = proposal_voted_no + 1;
    votes = udict_set_builder(votes, 256, member, begin_cell().store_uint(2,2));
  }
  
  proposals_dict = design_proposal(owner,balance,timestamp, success_threshold, fail_threshold , proposals_dict,proposal_id ,proposal_voted_yes , proposal_voted_no, proposal_voted_abstain,votes,is_related_with_nft,content);

  save_data(dao_type, token_contract, nft_contract,content, proposals_seq, proposals_dict);
  return ();
  }

  ;; op3 = execute proposal
  if(op == 3){
    int proposal_id = in_msg_body~load_uint(32);
    slice target_address =  in_msg_body~load_msg_addr();

    execute_proposal(proposal_id, member,target_address);

    return ();
  }
  
}

(int, slice, slice ,cell,int,cell) get_dao_data() method_id {
  var (dao_type, token_contract, nft_contract, content ,proposals_seq , proposals_dict) = load_data();

  return (dao_type, token_contract, nft_contract,content, proposals_seq, proposals_dict);
}