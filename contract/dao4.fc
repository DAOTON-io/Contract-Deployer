int error::invalid_message() asm "72 PUSHINT";

(int, slice, slice, cell,int, cell) load_data() inline {
  var ds = get_data().begin_parse();
 
  ;; "1,2,3,4,5,6,7"
  int dao_type = ds~load_uint(16);

  slice token_contract =  ds~load_msg_addr();
  slice nft_contract =  ds~load_msg_addr();
  cell content = ds~load_ref();
  int proposals_seq = ds~load_uint(32);
  ;; cell proposals_ref = ds~load_ref();


  ;; ;; Parse proposals
  cell proposals_dict = ds~load_dict();

  ds.end_parse();

return (dao_type, token_contract, nft_contract,content ,proposals_seq,proposals_dict);
}

() save_data(int dao_type ,slice token_contract, slice nft_contract ,cell content, int proposals_seq, cell proposals_dict) impure inline {
  set_data(begin_cell()
    .store_uint(dao_type, 16)
    .store_slice(token_contract)
    .store_slice(nft_contract)
    .store_ref(content)
    .store_uint(proposals_seq, 32)
    .store_dict(proposals_dict)
    .end_cell());
}

cell design_proposal(int owner,int timestamp ,int threshold_success ,int threshold_fail, cell proposals_dict, int proposal_id, int yes,int no, int abstain,cell votes) { 
    ;; Serialize proposal
    var container = begin_cell()
        .store_uint(owner,256) ;; proposal creater = master of proposal for cancel , execute ect.
        .store_uint(yes,32) ;; yes count
        .store_uint(no,32) ;; no count
        .store_uint(abstain,32) ;; abstain count
        .store_uint(timestamp,64) ;; expire time
        .store_ref(begin_cell() ;; dao 
            .store_uint(threshold_success,32)
            .store_uint(threshold_fail,32)
        .end_cell()) ;; votes
        .store_dict(votes);

  return udict_set_builder(proposals_dict,32, proposal_id , container);
}

(int,int,int,int,int,int,int,cell ) get_proposal(int id) method_id {
  var (dao_type, token_contract, nft_contract, content ,proposals_seq, proposals_dict ) = load_data();

    var (itm, found) = proposals_dict.udict_get?(32, id);

    ;; Read
    int owner = itm~load_uint(256);
    int proposal_voted_yes = itm~load_uint(32);
    int proposal_voted_no = itm~load_uint(32);
    int proposal_voted_abstain = itm~load_uint(32);
    int timestamp = itm~load_uint(64);
    cell threshold_ref = itm~load_ref();

    var threshold_data = threshold_ref.begin_parse();
    int success_threshold = threshold_data~load_uint(32);
    int fail_threshold = threshold_data~load_uint(32);

    threshold_data.end_parse();

    cell votes =  itm~load_dict();

    return (owner,proposal_voted_yes,proposal_voted_no,proposal_voted_abstain,timestamp,success_threshold,fail_threshold, votes);
}

;; init state
() recv_internal(cell in_msg_cell, slice in_msg_body) impure {
  var (dao_type, token_contract, nft_contract, content , proposals_seq , proposals_dict) = load_data();

  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
  }
 
  ;; Get sender address
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  slice s_addr = cs~load_msg_addr();
  (int sender_wc, slice sender_addr) = parse_var_addr(s_addr);
  int member = sender_addr~load_uint(256);

  int op = in_msg_body~load_uint(32);

 ;; op1 = create proposal
  if(op == 1){
   int timestamp = in_msg_body~load_uint(64); ;; timestamp
   int success_threshold = in_msg_body~load_uint(32); ;; success_threshold
   int fail_threshold = in_msg_body~load_uint(32); ;; fail_threshold
       
   proposals_dict = design_proposal(member,timestamp, success_threshold, fail_threshold , proposals_dict,proposals_seq ,0 , 0 , 0, null());

   save_data(dao_type, token_contract, nft_contract,content, proposals_seq + 1, proposals_dict);
   return ();
  } 

  ;; op2 = vote
  if(op == 2){
  ;; 0 = Abstain 1 = Yes 2 = No
  int proposal_id = in_msg_body~load_uint(32);
  int vote = in_msg_body~load_uint(2);
   
  var (owner,proposal_voted_yes,proposal_voted_no,proposal_voted_abstain,timestamp,success_threshold,fail_threshold,votes) = get_proposal(proposal_id);

   var (vs, vfound) = votes.udict_get?(256, member);
   throw_if(error::invalid_message(), vfound);

  ;; abstain vote
  if(vote == 0){
    proposal_voted_abstain = proposal_voted_abstain + 1;
    votes = udict_set_builder(votes, 256, member, begin_cell().store_uint(0,2));
  } 

  ;; yes vote
  if(vote == 1){
    proposal_voted_yes = proposal_voted_yes + 1;
    votes = udict_set_builder(votes, 256, member, begin_cell().store_uint(1,2));
  }

  ;; no vote
  if(vote == 2){
    proposal_voted_no = proposal_voted_no + 1;
    votes = udict_set_builder(votes, 256, member, begin_cell().store_uint(2,2));
  }
  
  proposals_dict = design_proposal(owner,timestamp, success_threshold, fail_threshold , proposals_dict,proposal_id ,proposal_voted_yes , proposal_voted_no, proposal_voted_abstain,votes);

  save_data(dao_type, token_contract, nft_contract,content, proposals_seq, proposals_dict);
  return ();
  }
  
}

(int, slice, slice ,cell,int,cell) get_dao_data() method_id {
   var (dao_type, token_contract, nft_contract, content ,proposals_seq , proposals_dict ) = load_data();

   return (dao_type, token_contract, nft_contract,content, proposals_seq, proposals_dict);
 }
