(int, slice, slice, cell, int,cell) load_data() inline {
  var ds = get_data().begin_parse();
  int dao_type = ds~load_uint(64);
  slice token_contract =  ds~load_msg_addr();
  slice nft_contract =  ds~load_msg_addr();
  cell content = ds~load_ref();

  cell proposals_ref = ds~load_ref();

  ;; Parse proposals
  ds = proposals_ref.begin_parse();
  int proposals_seq = ds~load_uint(32);
  cell proposals_dict = ds~load_dict();
  ;; proposals_ids = ds~load_dict();
  ds.end_parse();

return (dao_type, token_contract,nft_contract,content,proposals_seq, proposals_dict);

   
}

() save_data(int dao_type ,slice token_contract, slice nft_contract ,cell content,int proposals_seq , cell proposals_dict) impure inline {
  set_data(begin_cell()
    .store_uint(dao_type, 64)
    .store_slice(token_contract)
    .store_slice(nft_contract)
    .store_ref(content)
    .store_ref(begin_cell()
            .store_uint(proposals_seq, 32)
            .store_dict(proposals_dict)
    .end_cell())
    .end_cell());
}

() create_proposal(int timestamp,int treshold_success,int treshold_fail) impure { 
   var (dao_type, token_contract, nft_contract, content ,proposals_seq,proposals_dict) = load_data();

    ;; Serialize proposal
    var container = begin_cell()
        .store_coins(0) ;; yes count
        .store_coins(0) ;; no count
        .store_coins(0) ;; abstain count
        .store_uint(timestamp,64) ;; abstain count
        .store_ref(begin_cell()
            .store_coins(treshold_success)
            .store_coins(treshold_fail)
        .end_cell())
        .store_dict(null())
        .end_cell();

    ;; Store ref
    var data = begin_cell().store_ref(container);

    proposals_dict = udict_set_builder(proposals_dict, 32, proposals_seq + 1, data);

    save_data(dao_type, token_contract, nft_contract, content ,proposals_seq, proposals_dict);
}

;; init state
() recv_internal(cell in_msg_cell, slice in_msg_body) impure {
  var (dao_type, token_contract, nft_contract, content ,proposals_seq,proposals_dict) = load_data();

  ;;  Get sender address
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  slice s_addr = cs~load_msg_addr();
  (int sender_wc, slice sender_addr) = parse_var_addr(s_addr);
  int member = sender_addr~load_uint(256);

 
  if (in_msg_body.slice_empty?()) { ;; empty body
      save_data(dao_type, token_contract, nft_contract,content ,proposals_seq,proposals_dict);
  }
  else {
  
  int op = in_msg_body~load_uint(32);


 ;; op1 = create proposal
  if(op == 1){
   int time = in_msg_body~load_uint(64); ;; timestamp
   int success_threshold = in_msg_body~load_uint(64); ;; success_threshold
   int fail_threshold = in_msg_body~load_uint(64); ;; fail_threshold


   create_proposal(time, success_threshold, fail_threshold);
  }
  if(op == 2){

  }
  if(op == 3){

  }

  }

}

(cell) get_proposal() method_id {
   var (dao_type, token_contract, nft_contract,content,proposals_seq,proposals_dict) = load_data();
    
    
     begin_cell()
        .store_coins(0) ;; yes count
        .store_coins(0) ;; no count
        .store_coins(0) ;; abstain count
        .store_uint(timestamp,64) ;; abstain count
        .store_ref(begin_cell()
            .store_coins(treshold_success)
            .store_coins(treshold_fail)
        .end_cell())
        .store_dict(null())
        .end_cell();


   return (proposals_dict);
 }

(int, slice, slice ,cell,int) get_current_data() method_id {
   var (dao_type, token_contract, nft_contract,content,proposals_seq,proposals_dict) = load_data();

   return (dao_type, token_contract, nft_contract,content,proposals_seq);
 }
